This program will simulate a basic blockchain structure, inspired by the
Bitcoin and Ethereum blockchain. Each block will contain block number, hash, timestamp, and reference to previous block(hash).

~Cee Blockchain~ 
Link list to represent the blocks
Genesis block (1)

Block strucutre- nodes within a link list and ptr to next block. Block num, timestamp time_t, data[], previous_hash[], hash[], struct block* next to point to next block

In main(), it will initialize the Cee blockchain and set the genesis block

make_hash() create hash (random func or actually use a hashing algo)
- #include <openssl/sha.h>
- https://stackoverflow.com/questions/59112701/sha512-c-program-using-the-openssl-library
^^ doesn't work well with Windows

add_block() func must add a block to the end of the list, add timestamp and increment block num, ptr 
- use double ptr**(ptr that points to another ptr, holds addy of another ptr) to add to end of list
- malloc(sizeof(block struct)) to allocate memory for new block

error_block() turns out there is an error within the block, so remove block and reconnect link, update ptrs
- use two pointers, one to keep track of current and the other for previous 

block_info() get block info and print to terminal