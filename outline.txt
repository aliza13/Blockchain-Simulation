This program will simulate a basic blockchain structure, inspired by the
Bitcoin and Ethereum blockchain. Each block will contain block number, hash, timestamp, and reference to previous block(hash).

~Cee Blockchain~ 
Cee currency 
Link list to represent the blocks
Genesis block (1)

NEEDS: 
C Language Features (70%):
o #define macro -> constants
o User IO and file IO -> make sure to read and write to a file 
o 2-d array, array of pointers, array of 
string
o Dynamic memory management
o Define a struct within a struct
o Recursion (optional)
-input validation

Block strucutre- node within link list which contains a ptr to next block. Block num, timestamp time_t, int data, *previous_hash, hash[], struct block* next to point to next block in blockchain

typedef struct block_node {
    time_t timestamp;
    float data; // Cee is currency, data is amount
    char *previous_hash;
    struct block_node *next;
} block_node;

In main(), it will initialize the Cee blockchain and set the genesis block
- Cee blockchain be a 2D array with blockchain_data struct
struct blockchain_data {
    int block_num;
    char hash[255]; // change [num] if needed
    float data; // what data is going to be in here? should it be block_node data? 
}

- 2 columns to represent 1 block
- each row holds block number, hash, block's data
cee_blockchain[r][c] = {}

make_hash() create hash (use a hashing algo)
- SHA 256 using CNG- built in window files 

add_block() func must add a block to the end of the list, add timestamp and increment block num, ptr 
- use double ptr**(ptr that points to another ptr, holds addy of another ptr) to add to end of list
- malloc(sizeof(block struct)) to allocate memory for new block

error_block() turns out there is an error within the block, so remove block and reconnect link, update ptrs
- use two pointers, one to keep track of current and the other for previous 

block_info() get block info and print to terminal