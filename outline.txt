This program will simulate a basic blockchain structure, inspired by the
Bitcoin and Ethereum blockchain. Each block will contain block number, hash, timestamp, and reference to previous block(hash).

~Cee Blockchain~ 
Cee currency 
Link list to represent the blocks
Genesis block (1)

NEEDS: 
o User IO and file IO -> make sure to read and write to a file 
o Recursion (optional)

Block strucutre- node within link list which contains a ptr to next block. Timestamp time_t, int data, *previous_hash, hash[], struct block* next to point to next block in blockchain

typedef struct block_node {
    time_t timestamp;
    float data; // Cee is currency, data is amount
    char *previous_hash;
    char hash[255];
    struct block_node *next;
} block_node;

In main(), it will initialize the Cee blockchain and set the genesis block
- Cee blockchain be a 2D array with blockchain_data struct

- 1 column to represent 1 block's data
- each row holds block number(index), block's data
- array index will be block number = r + 1 
cee_blockchain[big num to initialize how many blocks can fitr][1 column] = {}

for loop to iterate through all the rows setting 
.block_num = r + 1
.data = get_data_fromLL()  
// printf("\n2D Array\n");
// for (int i = 0; i < rows; i++) {
//     for (int j = 0; j < cols; j++) {
//         printf("Row %d, Col %d: \nTimestamp: %s Data: %.2f, \nPrevious Hash: %s, \nHash: %s\n",
//             i, j, block_node_ptrs[i][j].timestamp,
//             block_node_ptrs[i][j].data, block_node_ptrs[i][j].previous_hash,
//             block_node_ptrs[i][j].hash);
//     }
// }

make_hash() create hash (use a hashing algo)
- SHA 256 using CNG- built in window files 
- documentation used: https://learn.microsoft.com/en-us/windows/win32/seccng/creating-a-hash-with-cng

add_block() adds a block to the end of the list
- add timestamp  
    * for local time: https://www.geeksforgeeks.org/time-h-localtime-function-in-c-with-examples/
    * eth blocks show:  4 mins ago (Nov-28-2023 10:04:35 PM +UTC) format
- malloc(sizeof(block struct)) to allocate memory for new block

free_linked_list()
free 2D array
just loop through array / LL and free memory with free()

add to csv file ()
- add what was saved in 2D array to a csv file
- 1 line = 1 block and its info
- CSV file

read from csv file()
- or link the user a text file and they can read it to see the blockchain 
- user should not be able to mess with CSV file, no removing blocks. Cee blockchain is permanent after
the finalize blocks case

error_block() turns out there is an error within the block, so remove block and reconnect link, update ptrs
- use two pointers, one to keep track of current and the other for previous 

block_info() get block info and print to terminal